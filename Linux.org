#+STARTUP: showall
#+OPTIONS: num:nil
#+TITLE: Linux Manual Pages

* watch(1)
  ~watch [options] command~

  Execute a program periodically, showing output full-screen

  This command is very useful when monitoring some slow change or simply to emulate top.
  I usually run it with ~-d~ flag and ~-n~ set to 1 (one second).

  There are many places this command is useful, I sometimes use it to monitor VCS fail-overs and user activity.

* from(1)
  ~from [-c] [-f file] [-s sender] [user]~

  Print names of those who have sent mail

  This can be used nicely in conjunction with ~watch~ to display incoming email.

  ~-s~ option can be used like a filter.

  MAIL environment variable is consulted for the mailbox location, otherwise default of /var/mail/user is used.

* pwdx(1)
  ~pwdx [options] pid [...]~

  Report current working directory of a process

  This is rarely useful, but when it is useful it is /really/ useful.

* paste(1)
  ~paste [OPTION]... [FILE]...~

  Merge lines of files

  This command is very handy when you need to multi-column lists. By default the files are aligned as columns, but if you supply ~-s~ option they will be aligned as rows instead.

  ~-d~ is used when you need something other than TAB separating the columns. Generally the delimiter list will contain /n - 1/ delimiters, where /n/ is the number of columns, which itself will be either number of arguments supplied to ~paste~ or number of lines in the file if ~-s~ was used.

* lscpu(1)
  ~lscpu [-hpx] [-s directory]~

  Display information on CPU architecture

  Quick and easy way to find information about your CPU(s). ~-p~ can be used when this output must be parsed by a script or piped to some other command, it generates a nice CSV list instead of human readable output. If you supply ~-s~ with location of sys filesystem root of another system, it can also give you information about that systems CPU.

* tailf(1)
  ~tailf [OPTION] file~

  Follow the growth of a log file

  This is the same as ~tail -f~, except files are not accessed when not growing. This means it is much better choice on laptops where the disks might be spun down to save power. ~-n~ can be used to change the number of lines displayed initially. This command does not update file access time.

* true(1)
  ~true [ignored command line arguments]~

  Do nothing, successfully

  Exit with a status code indicating success. This is superseded by shell built-in ~true~ command. The value returned by this command is always ~0~. It is mostly used in shell scripts for infinite loops.

* false(1)
  ~false [ignored command line arguments]~

  Do nothing, unsuccessfully

  Exit with a status code indicating failure. This is superseded by shell built-in ~false~ command. The value returned by this command is always ~1~. This command is most commonly encountered in ~/etc/passwd~ file as the value of shell for users who are not allowed to log-in, although ~/sbin/nologin~ may be more fitting for this purpose, as it prints a notification before terminating the session.

* lsmod(8)
  Show the status of modules in the Linux Kernel

  This command just displays the list of modules currently loaded into the kernel from ~/proc/modules~ in a nicely formatted way.

* insmod(8)
  ~insmod [filename] [module options...]~

  Simple program to insert a module into the Linux Kernel

  You should probably use ~modprobe(8)~ instead. ~dmesg~ should be consulted for full error reports as most of work is done by the kernel, not this command.

* rmmod(8)
  ~rmmod [-f] [-w] [-s] [-v] [modulename]~

  Simple program to remove a module from the Linux Kernel

  You should probably use ~modprobe(8)~ with ~-r~ option. For this to work the kernel must support module unloading. ~-f~ only works if the kernel is compiled with /CONFIG_MODULE_FORCE_UNLOAD/ and it allows you to remove modules which are not supposed to be removed. ~-s~ will redirect errors to syslog. ~-w~ can be used when the module you are trying to unload is in use, it will block new uses of the module and wait until it can be safely unloaded.

* modprobe(8)
  ~modprobe [-v] [-V] [-C config-file] [-n] [-i] [-q] [-b] [modulename] [module parameters...]~

  ~modprobe [-r] [-v] [-n] [-i] [modulename...]~

  ~modprobe [-c]~

  ~modprobe [--dump-modversions] [filename]~

  Add and remove modules from the Linux Kernel intelligently

  For convenience there is no difference between ~-~ and ~_~ in module names, dashes are automatically converted to underscores.
  Kernel does the work of resolving sumbols and understanding parameters.
  Module dependencies should be up to date prior to calling this command, done using ~depmod(8)~.
  ~-C~ can be used to specify alternate configuration file, ignoring ~/etc/modprobe.d~.
  ~--first-time~ can be used in scripts to know for sure whether ~modprobe~ actually did anything, it affects the exit status when it does not do anything.
  ~-n~ performs a dry-run, combine with ~-v~ for troubleshooting.
  ~-r~ is used to remove a module instead of inserting it, this will also try to remove its dependencies which are no longer required. Can take more than one module as an argument.
  ~-S~ specifies kernel version to use when findng modules instead of relying on ~uname(2)~
  ~--show-depends~ lists module or alias dependencies, including module itself.
  ~-s~ redirects error messages to syslog.
  
